// Code generated by protoc-gen-go. DO NOT EDIT.
// source: FrameReadout.proto

package hermes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FrameReadout_Error int32

const (
	FrameReadout_NO_ERROR           FrameReadout_Error = 0
	FrameReadout_PROCESS_OVERFLOW   FrameReadout_Error = 1
	FrameReadout_PROCESS_TIMEOUT    FrameReadout_Error = 2
	FrameReadout_ILLUMINATION_ERROR FrameReadout_Error = 3
)

var FrameReadout_Error_name = map[int32]string{
	0: "NO_ERROR",
	1: "PROCESS_OVERFLOW",
	2: "PROCESS_TIMEOUT",
	3: "ILLUMINATION_ERROR",
}
var FrameReadout_Error_value = map[string]int32{
	"NO_ERROR":           0,
	"PROCESS_OVERFLOW":   1,
	"PROCESS_TIMEOUT":    2,
	"ILLUMINATION_ERROR": 3,
}

func (x FrameReadout_Error) String() string {
	return proto.EnumName(FrameReadout_Error_name, int32(x))
}
func (FrameReadout_Error) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type FrameReadout struct {
	Timestamp    int64                      `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	FrameID      int64                      `protobuf:"varint,2,opt,name=frameID" json:"frameID,omitempty"`
	Ants         []*Ant                     `protobuf:"bytes,3,rep,name=ants" json:"ants,omitempty"`
	Time         *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
	Error        FrameReadout_Error         `protobuf:"varint,5,opt,name=error,enum=fort.hermes.FrameReadout_Error" json:"error,omitempty"`
	ProducerUuid string                     `protobuf:"bytes,6,opt,name=producer_uuid,json=producerUuid" json:"producer_uuid,omitempty"`
}

func (m *FrameReadout) Reset()                    { *m = FrameReadout{} }
func (m *FrameReadout) String() string            { return proto.CompactTextString(m) }
func (*FrameReadout) ProtoMessage()               {}
func (*FrameReadout) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FrameReadout) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FrameReadout) GetFrameID() int64 {
	if m != nil {
		return m.FrameID
	}
	return 0
}

func (m *FrameReadout) GetAnts() []*Ant {
	if m != nil {
		return m.Ants
	}
	return nil
}

func (m *FrameReadout) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *FrameReadout) GetError() FrameReadout_Error {
	if m != nil {
		return m.Error
	}
	return FrameReadout_NO_ERROR
}

func (m *FrameReadout) GetProducerUuid() string {
	if m != nil {
		return m.ProducerUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*FrameReadout)(nil), "fort.hermes.FrameReadout")
	proto.RegisterEnum("fort.hermes.FrameReadout_Error", FrameReadout_Error_name, FrameReadout_Error_value)
}

func init() { proto.RegisterFile("FrameReadout.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x51, 0x4f, 0xfa, 0x30,
	0x14, 0xc5, 0xff, 0x63, 0xc0, 0x5f, 0x0a, 0xea, 0x72, 0x35, 0xa6, 0x21, 0x26, 0x2c, 0xc8, 0xc3,
	0x5e, 0xec, 0x12, 0x8c, 0x1f, 0x00, 0x75, 0xc4, 0x25, 0x40, 0x4d, 0x19, 0x6a, 0x7c, 0x21, 0x63,
	0xeb, 0x60, 0xd1, 0x51, 0x52, 0xda, 0x2f, 0xea, 0x27, 0x32, 0x6c, 0x4c, 0xe1, 0xb1, 0xe7, 0xfc,
	0xee, 0xe9, 0xb9, 0x17, 0xc1, 0x50, 0x86, 0x19, 0x67, 0x3c, 0x8c, 0x85, 0x56, 0x64, 0x23, 0x85,
	0x12, 0xd0, 0x4c, 0x84, 0x54, 0x64, 0xc5, 0x65, 0xc6, 0xb7, 0xed, 0xce, 0x52, 0x88, 0xe5, 0x17,
	0x77, 0x73, 0x6b, 0xa1, 0x13, 0x57, 0xa5, 0x19, 0xdf, 0xaa, 0x30, 0xdb, 0x14, 0x74, 0xbb, 0x31,
	0x58, 0xef, 0x07, 0xbb, 0xdf, 0x15, 0xd4, 0x3a, 0xcc, 0x83, 0x6b, 0xd4, 0xf8, 0xc5, 0xb1, 0x61,
	0x1b, 0x8e, 0xc9, 0xfe, 0x04, 0xc0, 0xe8, 0x7f, 0xb2, 0xa3, 0xfd, 0x27, 0x5c, 0xc9, 0xbd, 0xf2,
	0x09, 0x3d, 0x54, 0x0d, 0xd7, 0x6a, 0x8b, 0x4d, 0xdb, 0x74, 0x9a, 0x7d, 0x8b, 0x1c, 0x14, 0x22,
	0x83, 0xb5, 0x62, 0xb9, 0x0b, 0x04, 0x55, 0x77, 0x61, 0xb8, 0x6a, 0x1b, 0x4e, 0xb3, 0xdf, 0x26,
	0x45, 0x53, 0x52, 0x36, 0x25, 0x41, 0xf9, 0x13, 0xcb, 0x39, 0xb8, 0x47, 0x35, 0x2e, 0xa5, 0x90,
	0xb8, 0x66, 0x1b, 0xce, 0x59, 0xbf, 0x73, 0x14, 0x7b, 0x74, 0x07, 0x6f, 0x87, 0xb1, 0x82, 0x86,
	0x1b, 0x74, 0xba, 0x91, 0x22, 0xd6, 0x11, 0x97, 0x73, 0xad, 0xd3, 0x18, 0xd7, 0x6d, 0xc3, 0x69,
	0xb0, 0x56, 0x29, 0xce, 0x74, 0x1a, 0x77, 0xdf, 0x51, 0x2d, 0x1f, 0x82, 0x16, 0x3a, 0x99, 0xd0,
	0xb9, 0xc7, 0x18, 0x65, 0xd6, 0x3f, 0xb8, 0x44, 0xd6, 0x0b, 0xa3, 0x8f, 0xde, 0x74, 0x3a, 0xa7,
	0xaf, 0x1e, 0x1b, 0x8e, 0xe8, 0x9b, 0x65, 0xc0, 0x05, 0x3a, 0x2f, 0xd5, 0xc0, 0x1f, 0x7b, 0x74,
	0x16, 0x58, 0x15, 0xb8, 0x42, 0xe0, 0x8f, 0x46, 0xb3, 0xb1, 0x3f, 0x19, 0x04, 0x3e, 0x9d, 0xec,
	0x23, 0xcc, 0x07, 0xe7, 0xd9, 0xfc, 0xe8, 0x2d, 0x53, 0xb5, 0xd2, 0x0b, 0x12, 0x89, 0xcc, 0x4d,
	0x84, 0xcc, 0xd2, 0x28, 0x8d, 0x43, 0x7e, 0xab, 0x64, 0x18, 0x7d, 0x72, 0xe9, 0x16, 0x2b, 0x2c,
	0xea, 0xf9, 0xe6, 0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x39, 0xa3, 0xe8, 0xd4, 0x01,
	0x00, 0x00,
}
