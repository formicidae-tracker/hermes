// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Header.proto

package hermes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Header_Type int32

const (
	Header_Network Header_Type = 0
	Header_File    Header_Type = 1
)

var Header_Type_name = map[int32]string{
	0: "Network",
	1: "File",
}
var Header_Type_value = map[string]int32{
	"Network": 0,
	"File":    1,
}

func (x Header_Type) String() string {
	return proto.EnumName(Header_Type_name, int32(x))
}
func (Header_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

type Version struct {
	Vmajor uint32 `protobuf:"varint,1,opt,name=vmajor" json:"vmajor,omitempty"`
	Vminor uint32 `protobuf:"varint,2,opt,name=vminor" json:"vminor,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Version) GetVmajor() uint32 {
	if m != nil {
		return m.Vmajor
	}
	return 0
}

func (m *Version) GetVminor() uint32 {
	if m != nil {
		return m.Vminor
	}
	return 0
}

type Header struct {
	Version  *Version    `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Type     Header_Type `protobuf:"varint,2,opt,name=type,enum=fort.hermes.Header_Type" json:"type,omitempty"`
	Previous string      `protobuf:"bytes,3,opt,name=previous" json:"previous,omitempty"`
	Width    int32       `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height   int32       `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Header) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Header) GetType() Header_Type {
	if m != nil {
		return m.Type
	}
	return Header_Network
}

func (m *Header) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *Header) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Header) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Footer struct {
	Next string `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
}

func (m *Footer) Reset()                    { *m = Footer{} }
func (m *Footer) String() string            { return proto.CompactTextString(m) }
func (*Footer) ProtoMessage()               {}
func (*Footer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Footer) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

type FileLine struct {
	Readout *FrameReadout `protobuf:"bytes,1,opt,name=readout" json:"readout,omitempty"`
	Footer  *Footer       `protobuf:"bytes,2,opt,name=footer" json:"footer,omitempty"`
}

func (m *FileLine) Reset()                    { *m = FileLine{} }
func (m *FileLine) String() string            { return proto.CompactTextString(m) }
func (*FileLine) ProtoMessage()               {}
func (*FileLine) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *FileLine) GetReadout() *FrameReadout {
	if m != nil {
		return m.Readout
	}
	return nil
}

func (m *FileLine) GetFooter() *Footer {
	if m != nil {
		return m.Footer
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "fort.hermes.Version")
	proto.RegisterType((*Header)(nil), "fort.hermes.Header")
	proto.RegisterType((*Footer)(nil), "fort.hermes.Footer")
	proto.RegisterType((*FileLine)(nil), "fort.hermes.FileLine")
	proto.RegisterEnum("fort.hermes.Header_Type", Header_Type_name, Header_Type_value)
}

func init() { proto.RegisterFile("Header.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0xad, 0x94, 0x16, 0xa6, 0x6a, 0xc8, 0x4a, 0x4c, 0x25, 0x9a, 0x90, 0xc6, 0x43, 0x13,
	0xb5, 0x24, 0x70, 0xf2, 0xea, 0x81, 0x70, 0x30, 0x1e, 0x36, 0xc6, 0x83, 0xb7, 0x42, 0x07, 0xba,
	0x42, 0x3b, 0xcd, 0xb0, 0x80, 0xfc, 0x4a, 0xff, 0x92, 0xe9, 0xb6, 0x18, 0xb8, 0xf5, 0x4d, 0xbf,
	0x79, 0x33, 0x6f, 0x16, 0x2e, 0x26, 0x18, 0x27, 0xc8, 0x51, 0xc1, 0xa4, 0x49, 0x78, 0x73, 0x62,
	0x1d, 0xa5, 0xc8, 0x19, 0xae, 0x7b, 0x62, 0xcc, 0x71, 0x86, 0x12, 0xe3, 0x84, 0x36, 0xba, 0x02,
	0x82, 0x17, 0x70, 0x3f, 0x91, 0xd7, 0x8a, 0x72, 0x71, 0x03, 0xce, 0x36, 0x8b, 0xbf, 0x89, 0x7d,
	0xab, 0x6f, 0x85, 0x97, 0xb2, 0x56, 0x55, 0x5d, 0xe5, 0xc4, 0xfe, 0xf9, 0xa1, 0x5e, 0xaa, 0xe0,
	0xd7, 0x02, 0xa7, 0x1a, 0x26, 0x22, 0x70, 0xb7, 0x95, 0x8b, 0xe9, 0xf5, 0x86, 0xdd, 0xe8, 0x68,
	0x70, 0x54, 0x4f, 0x90, 0x07, 0x48, 0x3c, 0x81, 0xad, 0xf7, 0x05, 0x1a, 0xc3, 0xab, 0xa1, 0x7f,
	0x02, 0xd7, 0xfb, 0x7f, 0xec, 0x0b, 0x94, 0x86, 0x12, 0x3d, 0x68, 0x15, 0x8c, 0x5b, 0x45, 0x9b,
	0xb5, 0xdf, 0xe8, 0x5b, 0x61, 0x5b, 0xfe, 0x6b, 0xd1, 0x85, 0xe6, 0x4e, 0x25, 0x3a, 0xf5, 0xed,
	0xbe, 0x15, 0x36, 0x65, 0x25, 0xca, 0x95, 0x53, 0x54, 0x8b, 0x54, 0xfb, 0x4d, 0x53, 0xae, 0x55,
	0x70, 0x0f, 0x76, 0xe9, 0x2b, 0x3c, 0x70, 0xdf, 0x51, 0xef, 0x88, 0x97, 0x9d, 0x33, 0xd1, 0x02,
	0x7b, 0xac, 0x56, 0xd8, 0xb1, 0x82, 0x3b, 0x70, 0xc6, 0x44, 0x1a, 0x59, 0x08, 0xb0, 0x73, 0xfc,
	0xd1, 0x26, 0x4d, 0x5b, 0x9a, 0xef, 0x60, 0x05, 0xad, 0x92, 0x7b, 0x53, 0x39, 0x8a, 0x11, 0xb8,
	0x5c, 0xdd, 0xb1, 0x0e, 0x7c, 0x7b, 0x92, 0xe1, 0xf8, 0xd0, 0xf2, 0x40, 0x8a, 0x47, 0x70, 0xe6,
	0xc6, 0xde, 0xe4, 0xf6, 0x86, 0xd7, 0xa7, 0x3d, 0xe6, 0x97, 0xac, 0x91, 0xd7, 0x70, 0xd2, 0xf8,
	0x7a, 0x58, 0x28, 0x9d, 0x6e, 0xa6, 0xd1, 0x8c, 0xb2, 0xc1, 0x9c, 0x38, 0x53, 0x33, 0x95, 0xc4,
	0xf8, 0xac, 0x39, 0x9e, 0x2d, 0x91, 0x07, 0x55, 0xe3, 0xd4, 0x31, 0x2f, 0x39, 0xfa, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x45, 0xc0, 0x36, 0x2e, 0xfa, 0x01, 0x00, 0x00,
}
