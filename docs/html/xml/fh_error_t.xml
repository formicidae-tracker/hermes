<?xml version='1.0' encoding='utf-8'?>
<struct id="fh_error_t" name="fh_error_t" typedef="yes" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Error reporting object.</brief>
  <doc><ref ref="fh_error_t#fh_error_t">fh_error_t</ref> represent any error / exceptional condition that could
happens when using libfort-hermes functions. It contains an
internal <ref ref="index#fh_error_code_e">fh_error_code_e</ref> and a describing string.

<ref ref="fh_error_t#fh_error_t">fh_error_t</ref> are passed as initialized arguments to any function that
reports error. They should be initialized by the user using
<ref ref="fh_error_t#fh_error_create">fh_error_create</ref> and cleaned up using <ref ref="fh_error_t#fh_error_destroy">fh_error_destroy</ref>.

The same error structure can be used repeatidly accros multiple
call to the library function.
</doc>
  <field id="fh_error_t::what" name="what">
    <brief>Textual description of the error.</brief>
    <type builtin="yes" name="char" qualifier="*" />
  </field>
  <field id="fh_error_t::code" name="code">
    <brief>Type of the error</brief>
    <type name="fh_error_code_e" ref="index#fh_error_code_e" />
  </field>
  <function id="fh_error_create" name="fh_error_create">
    <brief>Creates a new fh_error_t structure for reporting</brief>
    <return>
      <doc>a newly allocated <ref ref="fh_error_t#fh_error_t">fh_error_t</ref></doc>
      <type name="fh_error_t" qualifier="*" ref="fh_error_t#fh_error_t" />
    </return>
  </function>
  <function id="fh_error_destroy" name="fh_error_destroy">
    <brief>Frees an fh_error_t</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fh_error_destroy::err" name="err">
      <doc>the <ref ref="fh_error_t#fh_error_t">fh_error_t</ref> to free.</doc>
      <type name="fh_error_t" qualifier="*" ref="fh_error_t#fh_error_t" />
    </argument>
  </function>
</struct>
